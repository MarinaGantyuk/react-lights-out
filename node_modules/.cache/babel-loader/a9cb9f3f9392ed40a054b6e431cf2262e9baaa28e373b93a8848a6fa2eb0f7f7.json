{"ast":null,"code":"var _jsxFileName = \"/Users/marinagantyuk/Desktop/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // TODO: create array-of-arrays of true/false values\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Boolean(j % 2));\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        if (board[i][j] === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function flipCellsAround(y, x) {\n    setBoard(oldBoard => {\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let deepCopy = JSON.parse(JSON.stringify(oldBoard));\n\n      // TODO: in the copy, flip this cell and the cells around it\n      // here we flip the cell where we click\n      flipCell(y, x, deepCopy);\n      // here we flip the cell above\n      flipCell(y - 1, x, deepCopy);\n      // here we flip the cells below\n      flipCell(y + 1, x, deepCopy);\n      // here we flip the ones on the left\n      flipCell(y, x - 1, deepCopy);\n      // here we flip the ones on the right\n      flipCell(y, x + 1, deepCopy);\n      // TODO: return the copy\n      return deepCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return \"You Won\";\n  }\n\n  // make table board\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: cell,\n        flipCellsAroundMe: () => flipCellsAround(y, x)\n      }, x, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this))\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","push","Boolean","hasWon","flipCellsAround","y","x","oldBoard","flipCell","boardCopy","deepCopy","JSON","parse","stringify","children","map","cell","isLit","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marinagantyuk/Desktop/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // TODO: create array-of-arrays of true/false values\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Boolean(j % 2));\n      }\n      initialBoard.push(row);\n    }\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        if (board[i][j] === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function flipCellsAround(y, x) {\n    setBoard((oldBoard) => {\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let deepCopy = JSON.parse(JSON.stringify(oldBoard));\n\n      // TODO: in the copy, flip this cell and the cells around it\n      // here we flip the cell where we click\n      flipCell(y, x, deepCopy);\n      // here we flip the cell above\n      flipCell(y - 1, x, deepCopy);\n      // here we flip the cells below\n      flipCell(y + 1, x, deepCopy);\n      // here we flip the ones on the left\n      flipCell(y, x - 1, deepCopy);\n      // here we flip the ones on the right\n      flipCell(y, x + 1, deepCopy);\n      // TODO: return the copy\n      return deepCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return \"You Won\";\n  }\n\n  // make table board\n\n  return (\n    <table>\n      {board.map((row, y) => (\n        <tr key={y}>\n          {row.map((cell, x) => (\n            <Cell\n              key={x}\n              isLit={cell}\n              flipCellsAroundMe={() => flipCellsAround(y, x)}\n            />\n          ))}\n        </tr>\n      ))}\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}